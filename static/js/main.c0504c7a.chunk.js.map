{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","onDetails","postId","className","map","post","userId","title","type","value","id","onClick","BASE_URL","getData","getFrom","a","fetch","response","json","Error","removeFrom","method","addTo","data","headers","body","JSON","stringify","getComments","removeComment","commentId","removeData","addComment","addData","selectedPostId","Loader","NewCommentForm","updateComments","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","inputsHendler","event","currentTarget","name","pushNewComment","email","onSubmit","preventDefault","placeholder","onChange","required","PostDetails","isHideComment","setHideComment","comments","setComments","setPost","isLoader","setLoader","loadComments","commentsFromServer","loadPostDetails","postFromServer","useEffect","hendlerDeleteComment","length","isHide","comment","App","setPosts","users","setUsers","selectUserId","setSelectUserId","selectPostId","setSelectPostId","loadPosts","postsFromServer","loadPostsByUserId","loadUsers","usersFromServer","loadAllData","hendlerSelect","useCallback","target","hendlerOpenDetails","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0504c7a.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  postId: number;\n  onDetails: (event: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onDetails, postId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            value={post.id}\n            onClick={onDetails}\n          >\n            {\n              postId === post.id\n                ? <>Close</>\n                : <>Open</>\n            }\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getData<T>(getFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${getFrom}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function removeData<T>(removeFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${removeFrom}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function addData<T>(addTo: string, data: T) {\n  const response = await fetch(`${BASE_URL}${addTo}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({ ...data }),\n  });\n\n  return response.json();\n}\n","import { addData, getData, removeData } from './api';\n\nexport function getComments(postId: number): Promise<CommentPost[]> {\n  return getData<CommentPost[]>(`/comments?postId=${postId}`);\n}\n\nexport function removeComment(commentId: number): Promise<CommentPost> {\n  return removeData<CommentPost>(`/comments/${commentId}`);\n}\n\nexport function addComment(data: CommentPost): Promise<CommentPost> {\n  return addData<CommentPost>('/comments', data);\n}\n","import { getData } from './api';\n\nexport function getPosts(): Promise<Post[]> {\n  return getData<Post[]>('/posts');\n}\n\nexport function getUserPosts(userId: number): Promise<Post[]> {\n  return getData<Post[]>(`/posts?userId=${userId}`);\n}\n\nexport function selectedPostId(postId: number): Promise<Post> {\n  return getData<Post>(`/posts/${postId}`);\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  updateComments: (id: number) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, updateComments }) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const inputsHendler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setCommentName(value);\n        break;\n      case 'email':\n        setCommentEmail(value);\n        break;\n      case 'body':\n        setCommentBody(value);\n        break;\n      default:\n    }\n  };\n\n  const pushNewComment = async () => {\n    await addComment({\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n    });\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n\n    updateComments(postId);\n  };\n\n  const submitHendler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    pushNewComment();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHendler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments, removeComment } from '../../api/comments';\nimport { selectedPostId } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [isHideComment, setHideComment] = useState(true);\n  const [comments, setComments] = useState<CommentPost[]>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [isLoader, setLoader] = useState(false);\n\n  const loadComments = async (id: number) => {\n    const commentsFromServer = await getComments(id);\n\n    setComments(commentsFromServer);\n  };\n\n  const loadPostDetails = async (id: number) => {\n    setLoader(true);\n    const postFromServer = await selectedPostId(id);\n\n    setPost(postFromServer);\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    if (postId) {\n      loadPostDetails(postId);\n    }\n  },\n  [postId]);\n\n  useEffect(() => {\n    if (post) {\n      loadComments(postId);\n    }\n  },\n  [post]);\n\n  const hendlerDeleteComment = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    await removeComment(+event.currentTarget.value);\n    if (post) {\n      loadComments(postId);\n    }\n  };\n\n  const hendlerHideComment = () => {\n    setHideComment((isHide) => (!isHide));\n  };\n\n  if (isLoader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {\n        post\n          ? (\n            <>\n              <section className=\"PostDetails__post\">\n                <p>\n                  {post.title}\n                </p>\n              </section>\n\n              {\n                !!comments.length\n                && (\n                  <section className=\"PostDetails__comments\">\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={hendlerHideComment}\n                    >\n                      {\n                        isHideComment\n                          ? (<>Hide </>)\n                          : (<>Show </>)\n                      }\n                      {comments.length}\n                      <> comments</>\n                    </button>\n                    {\n                      isHideComment\n                      && (\n                        <ul className=\"PostDetails__list\">\n                          {\n                            comments.map(comment => (\n                              <li\n                                className=\"PostDetails__list-item\"\n                                key={comment.id}\n                              >\n                                <button\n                                  type=\"button\"\n                                  className=\"PostDetails__remove-button button\"\n                                  value={comment.id}\n                                  onClick={hendlerDeleteComment}\n                                >\n                                  X\n                                </button>\n                                <p>\n                                  {comment.body}\n                                </p>\n                              </li>\n                            ))\n                          }\n                        </ul>\n                      )\n                    }\n                  </section>\n                )\n              }\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={post.id}\n                    updateComments={loadComments}\n                  />\n                </div>\n              </section>\n            </>\n          )\n          : (\n            <span>\n              Can not find post details\n            </span>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectUserId, setSelectUserId] = useState(0);\n  const [selectPostId, setSelectPostId] = useState(0);\n  const [isLoader, setLoader] = useState(false);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts();\n\n    setPosts(postsFromServer);\n  };\n\n  const loadPostsByUserId = async () => {\n    const postsFromServer = await getUserPosts(selectUserId);\n\n    setPosts(postsFromServer);\n  };\n\n  const loadUsers = async () => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  };\n\n  const loadAllData = async () => {\n    setLoader(true);\n    await loadPosts();\n    await loadUsers();\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    loadAllData();\n  }, []);\n\n  useEffect(() => {\n    if (selectUserId !== 0) {\n      loadPostsByUserId();\n    } else {\n      loadPosts();\n    }\n  }, [selectUserId]);\n\n  const hendlerSelect = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserId(+event.target.value);\n  }, []);\n\n  const hendlerOpenDetails = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectPostId(+event.currentTarget.value);\n  }, []);\n\n  if (isLoader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select_app\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"select_app\"\n            value={selectUserId}\n            onChange={hendlerSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onDetails={hendlerOpenDetails}\n            postId={selectPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails postId={selectPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './api';\n\nexport function getUsers(): Promise<User[]> {\n  return getData<User[]>('/users');\n}\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}