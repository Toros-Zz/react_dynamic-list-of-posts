{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/posts.ts","api/users.ts","index.tsx"],"names":["PostsList","posts","onDetails","postId","className","map","post","userId","title","type","value","id","onClick","BASE_URL","getData","getFrom","a","fetch","response","json","Error","removeFrom","method","addTo","data","headers","body","JSON","stringify","removeComment","commentId","removeData","addComment","addData","NewCommentForm","updateComments","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","inputsHendler","event","currentTarget","name","pushNewComment","email","onSubmit","preventDefault","placeholder","onChange","required","PostDetails","isHideComment","setHideComment","comments","setComments","loadComments","commentsFromServer","useEffect","deleteCommentHendler","isHide","length","comment","App","setPosts","postDetails","setPostDetails","users","setUsers","selectUser","setSelectUser","selectPost","setSelectPost","loadPosts","postsFromServer","loadSelectedPosts","loadUsers","usersFromServer","loadPostDetails","htmlFor","target","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27877e15.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  postId: number;\n  onDetails: (event: React.MouseEvent<HTMLButtonElement>) => void\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, onDetails, postId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            value={post.id}\n            onClick={onDetails}\n          >\n            {\n              postId === post.id\n                ? <>Close</>\n                : <>Open</>\n            }\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getData<T>(getFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${getFrom}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function removeData<T>(removeFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${removeFrom}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function addData<T>(addTo: string, data: T) {\n  const response = await fetch(`${BASE_URL}${addTo}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({ ...data }),\n  });\n\n  return response.json();\n}\n","import { addData, getData, removeData } from './api';\n\nexport function getComments(postId: number): Promise<CommentPost[]> {\n  return getData<CommentPost[]>(`/comments?postId=${postId}`);\n}\n\nexport function removeComment(commentId: number): Promise<CommentPost> {\n  return removeData<CommentPost>(`/comments/${commentId}`);\n}\n\nexport function addComment(data: CommentPost): Promise<CommentPost> {\n  return addData<CommentPost>('/comments', data);\n}\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  updateComments: (id: number) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, updateComments }) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const inputsHendler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setCommentName(value);\n        break;\n      case 'email':\n        setCommentEmail(value);\n        break;\n      case 'body':\n        setCommentBody(value);\n        break;\n      default:\n    }\n  };\n\n  const pushNewComment = async () => {\n    await addComment({\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n    });\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n\n    updateComments(postId);\n  };\n\n  const submitHendler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    pushNewComment();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHendler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={inputsHendler}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments, removeComment } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  post: Post | null;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isHideComment, setHideComment] = useState(true);\n  const [comments, setComments] = useState<CommentPost[]>([]);\n\n  const loadComments = async (id: number) => {\n    const commentsFromServer = await getComments(id);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    if (post) {\n      loadComments(post.id);\n    }\n  },\n  [post]);\n\n  const deleteCommentHendler = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    await removeComment(+event.currentTarget.value);\n    if (post) {\n      loadComments(post.id);\n    }\n  };\n\n  const hideCommentHendler = () => {\n    setHideComment((isHide) => (!isHide));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {\n        post\n          ? (\n            <>\n              <section className=\"PostDetails__post\">\n                <p>\n                  {post.title}\n                </p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={hideCommentHendler}\n                >\n                  {\n                    isHideComment\n                      ? (<>Hide </>)\n                      : (<>Show </>)\n                  }\n                  {comments.length}\n                  <> comments</>\n                </button>\n                {\n                  isHideComment\n                  && (\n                    <ul className=\"PostDetails__list\">\n                      {\n                        comments.map(comment => (\n                          <li\n                            className=\"PostDetails__list-item\"\n                            key={comment.id}\n                          >\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              value={comment.id}\n                              onClick={deleteCommentHendler}\n                            >\n                              X\n                            </button>\n                            <p>\n                              {comment.body}\n                            </p>\n                          </li>\n                        ))\n                      }\n                    </ul>\n                  )\n                }\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={post.id}\n                    updateComments={loadComments}\n                  />\n                </div>\n              </section>\n            </>\n          )\n          : (\n            <span>\n              Can not find post details\n            </span>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts, selectedPostId } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectUser, setSelectUser] = useState(0);\n  const [selectPost, setSelectPost] = useState(0);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts();\n\n    setPosts(postsFromServer);\n  };\n\n  const loadSelectedPosts = async () => {\n    const postsFromServer = await getUserPosts(selectUser);\n\n    setPosts(postsFromServer);\n  };\n\n  const loadUsers = async () => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  };\n\n  const loadPostDetails = async (id: number) => {\n    if (selectPost !== 0) {\n      const post = await selectedPostId(id);\n\n      setPostDetails(post);\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    if (selectUser !== 0) {\n      loadSelectedPosts();\n    } else {\n      loadPosts();\n    }\n  }, [selectUser]);\n\n  useEffect(() => {\n    loadPostDetails(selectPost);\n  }, [selectPost]);\n\n  const selectHendler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUser(+event.target.value);\n  };\n\n  const openDetailsHendler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectPost(+event.currentTarget.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select_app\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"select_app\"\n            value={selectUser}\n            onChange={selectHendler}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onDetails={openDetailsHendler}\n            postId={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails post={postDetails} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './api';\n\nexport function getPosts(): Promise<Post[]> {\n  return getData<Post[]>('/posts');\n}\n\nexport function getUserPosts(userId: number): Promise<Post[]> {\n  return getData<Post[]>(`/posts?userId=${userId}`);\n}\n\nexport function selectedPostId(postId: number): Promise<Post> {\n  return getData<Post>(`/posts/${postId}`);\n}\n","import { getData } from './api';\n\nexport function getUsers(): Promise<User[]> {\n  return getData<User[]>('/users');\n}\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}